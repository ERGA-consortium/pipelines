import os
import glob
import sys

configfile: "config.yaml"

prefix=config["prefix"]
tmpdir=os.getcwd()
output_yahs=prefix+"_scaffolds_final.fa"

DATASETS=["L1","L2"]

rule all:
	input:
		output_yahs

rule index_genome:
	input:
		config["input_assembly"]
	output:
		fai=config["input_assembly"]+".fai",
		genome=config["input_assembly"]+".genome",
		bwt=config["input_assembly"]+".bwt",
		pac=config["input_assembly"]+".pac",
		ann=config["input_assembly"]+".ann",
		amb=config["input_assembly"]+".amb",
		sa=config["input_assembly"]+".sa"
	conda:
		"yahs"
	threads:
		1
	shell:
		"samtools faidx {input} && cut -f1,2 {input}.fai > {input}.genome && bwa index {input}"

rule map_hic:
	input:
		bwt=config["input_assembly"]+".bwt",
		assembly=config["input_assembly"],
		reads_r1=expand("{dataset}_R1.fq.gz", dataset=config["SAMPLES"]),
		reads_r2=expand("{dataset}_R2.fq.gz", dataset=config["SAMPLES"])
	output:
		config["prefix"]+"_bwa.sam"
	conda:
		"yahs"

	threads:
		config["threads"]
	shell:
		"echo {input.reads_r1} && echo {input.reads_r2} && bwa mem -5SP -T0 -t {threads} -o {output} {input.assembly} <(cat {input.reads_r1}) <(cat {input.reads_r2})" 

rule parse_pairsam: 
	input:
		input_sam=config["prefix"]+"_bwa.sam",
		input_genome=config["input_assembly"]+".genome"
	output:
		config["prefix"]+"_bwa.parsed.pairsam"	
	conda:
		"yahs"
	threads:
		config["threads"]
	shell:
		"pairtools parse --min-mapq 40 --walks-policy 5unique --max-inter-align-gap 30 --nproc-in {threads} --nproc-out {threads} --chroms-path {input.input_genome} {input.input_sam} > {output}"

rule sort_pairsam:
	input:
		config["prefix"]+"_bwa.parsed.pairsam"
	output:
		config["prefix"]+"_bwa.sorted.pairsam"
	conda:
		"yahs"
	threads:
		config["threads"]	
	shell:
		"pairtools sort --nproc {threads} --tmpdir={tmpdir} {input} > {output}"

rule dedup_pairsam:
	input:
		config["prefix"]+"_bwa.sorted.pairsam"
	output:
		output_pairsam=config["prefix"]+"_bwa.dedup.pairsam",
		output_stats=config["prefix"]+".dedup.stats"
	conda:
		"yahs"
	threads:
		config["threads"]
	shell:
		"pairtools dedup --nproc-in {threads} --nproc-out {threads} --mark-dups --output-stats {output.output_stats} --output {output.output_pairsam} {input}"

rule split_pairsam:
	input:
		config["prefix"]+"_bwa.dedup.pairsam"
	output:
		output_pairs=config["prefix"]+"_bwa.dedup.pairs",
		output_bam=config["prefix"]+"_bwa.dedup.bam"
	conda:
		"yahs"
	threads:
		config["threads"]
	shell:
		"pairtools split --nproc-in {threads} --nproc-out {threads} --output-pairs {output.output_pairs} --output-sam {output.output_bam} {input}"

rule sort_bam:
	input:
		config["prefix"]+"_bwa.dedup.bam"
	output:
		config["prefix"]+"_bwa.dedup.sortname.bam"
	conda:
		"yahs"
	threads:
		config["threads"]
	shell:
		"samtools sort -@ {threads} -n -T {tmpdir} -o {output} {input}"

rule run_yahs:
	input:
		bam=config["prefix"]+"_bwa.dedup.sortname.bam",
		assembly=config["input_assembly"]
	output:
		config["prefix"]+"_scaffolds_final.fa"
	conda:
		"yahs"
	threads:
		1
	shell:
		"yahs {input.assembly} {input.bam} -v 1 -o {prefix}"

