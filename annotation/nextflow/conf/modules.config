process {
	publishDir = [
	    path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
	    mode: params.publish_dir_mode,
	    enabled: false
	]

	withName: UNCOMPRESS {
	    publishDir = [
	        path: { "${params.outdir}/00.Uncompress"},
	        mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
	    ]
	}	

	withName: FUNANNOTATE_CLEAN {
	    publishDir = [
	        path: { "${params.outdir}/01.Cleaned_Sorted"},
	        mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
	    ]
	}

	withName: FUNANNOTATE_SORT {
		publishDir = [
			path: { "${params.outdir}/01.Cleaned_Sorted"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: BUILD_DATABASE {
	    publishDir = [
	        path: { "${params.outdir}/02.Repeatmasker/Database"},
	        mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
	    ]
	}

	withName: REPEATMODELER {
	    publishDir = [
	        path: { "${params.outdir}/02.Repeatmasker/RepeatModeler"},
	        mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
	    ]
	}

	withName: COMBINEUNIPROT {
		publishDir = [
			path: { "${params.outdir}/02.Repeatmasker/FilteredRepeat/Combined_TEless"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: PROTEXCLUDER {
		publishDir = [
			path: { "${params.outdir}/02.Repeatmasker/FilteredRepeat/protexcluder"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: COMBINEKNOWN {
		publishDir = [
			path: { "${params.outdir}/02.Repeatmasker/FilteredRepeat/Combined_repeat"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: REPEATMASKER {
	    publishDir = [
	        path: { "${params.outdir}/02.Repeatmasker/RepeatMasker"},
	        mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
	    ]
	}

	withName: FASTQCPRE {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/00.QC/fastqc_pre"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: FASTQCPOST {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/00.QC/fastqc_post"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: FASTP_TRIM {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/01.trimmed_reads"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	//withName: BUILD_STAR {
	//	publishDir = [
	//		path: { "${params.outdir}/03.RNASeq/02.mapping_index/shortreads"},
	//		mode: params.publish_dir_mode,
	//	]
	//}

	withName: ALIGN_STAR {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/03.aligned/shortreads"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	//withName: MINIMAP2INDEX {
	//	publishDir = [
	//		path: { "${params.outdir}/03.RNASeq/02.mapping_index/longreads"},
	//		mode: params.publish_dir_mode
	//	]
	//}

	withName: ALIGN_MINIMAP2 {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/03.aligned/longreads"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: CATANDSORTSHORT {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/04.combined_results/shortreads"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: CATANDSORTLONG {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/04.combined_results/longreads"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: MERGEBAM {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/04.combined_results"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: STRINGTIE {
		publishDir = [
			path: { "${params.outdir}/03.RNASeq/05.stringtie"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: GENE_PREDICTION_FUNANNOTATE {
		publishDir = [
			path: { "${params.outdir}/04.Gene_predict/Funannotate"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: GENE_PREDICTION_BRAKER {
		publishDir = [
			path: { "${params.outdir}/04.Gene_predict/Braker"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: BUSCO {
		publishDir = [
			path: { "${params.outdir}/04.Gene_predict/busco"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}

	withName: MULTIQC {
		publishDir = [
			path: { "${params.outdir}/multiqc"},
			mode: params.publish_dir_mode,
			saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
		]
	}
}
